"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmptyCacheItem = require('./empty-cache-item.js');

var EofCacheItem = function (_EmptyCacheItem) {
  _inherits(EofCacheItem, _EmptyCacheItem);

  function EofCacheItem(start) {
    _classCallCheck(this, EofCacheItem);

    var _this = _possibleConstructorReturn(this, (EofCacheItem.__proto__ || Object.getPrototypeOf(EofCacheItem)).call(this, start, start));

    _this.eof = true;
    return _this;
  }

  /**
   * The virtual eof section 'contains' any offset after the end of the file.
   */


  _createClass(EofCacheItem, [{
    key: 'contains',
    value: function contains(offset) {
      if (offset >= this.start) {
        return true;
      }
    }
  }, {
    key: 'split',
    value: function split(offset) {
      if (!this.contains(offset)) {
        throw new Error('invalid split');
      }
      var a = new EmptyCacheItem(this.start, offset);
      var b = new EofCacheItem(offset);
      a.next = b;
      b.prev = a;
      return [a, b];
    }
  }]);

  return EofCacheItem;
}(EmptyCacheItem);

module.exports = EofCacheItem;
