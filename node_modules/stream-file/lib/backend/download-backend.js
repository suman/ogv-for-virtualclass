"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Backend = require('./backend.js');

/**
 * Backend for progressive downloading.
 * Subclasses handle details of strings/buffers.
 */

var DownloadBackend = function (_Backend) {
  _inherits(DownloadBackend, _Backend);

  function DownloadBackend() {
    _classCallCheck(this, DownloadBackend);

    return _possibleConstructorReturn(this, (DownloadBackend.__proto__ || Object.getPrototypeOf(DownloadBackend)).apply(this, arguments));
  }

  _createClass(DownloadBackend, [{
    key: 'bufferToOffset',
    value: function bufferToOffset(end) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (_this2.eof || _this2.offset >= end) {
          resolve();
        } else {
          (function () {
            var oncomplete = null;
            _this2._onAbort = function (err) {
              oncomplete();
              reject(err);
            };

            var checkBuffer = function checkBuffer() {
              if (_this2.offset >= end && !_this2.eof) {
                oncomplete();
                resolve();
              }
            };
            var checkDone = function checkDone() {
              oncomplete();
              resolve();
            };
            var checkError = function checkError() {
              oncomplete();
              reject(new Error('error streaming'));
            };

            oncomplete = function oncomplete() {
              _this2.buffering = false;
              _this2.off('buffer', checkBuffer);
              _this2.off('done', checkDone);
              _this2.off('error', checkError);
              _this2._onAbort = null;
            };

            _this2.buffering = true;
            _this2.on('buffer', checkBuffer);
            _this2.on('done', checkDone);
            _this2.on('error', checkError);
          })();
        }
      });
    }
  }, {
    key: 'initXHR',
    value: function initXHR() {
      _get(DownloadBackend.prototype.__proto__ || Object.getPrototypeOf(DownloadBackend.prototype), 'initXHR', this).call(this);
    }
  }, {
    key: 'onXHRStart',
    value: function onXHRStart() {
      var _this3 = this;

      // Event handlers to drive output
      this.xhr.addEventListener('progress', function () {
        return _this3.onXHRProgress();
      });
      this.xhr.addEventListener('error', function () {
        return _this3.onXHRError();
      });
      this.xhr.addEventListener('load', function () {
        return _this3.onXHRLoad();
      });

      this.emit('open');
    }
  }, {
    key: 'onXHRProgress',
    value: function onXHRProgress() {
      throw new Error('abstract');
    }
  }, {
    key: 'onXHRError',
    value: function onXHRError() {
      this.emit('error');
    }
  }, {
    key: 'onXHRLoad',
    value: function onXHRLoad() {
      this.eof = true;
      this.emit('done');
    }
  }]);

  return DownloadBackend;
}(Backend);

module.exports = DownloadBackend;
