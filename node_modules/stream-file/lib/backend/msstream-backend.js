"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Backend = require('./backend.js');

var type = 'ms-stream';

var MSStreamBackend = function (_Backend) {
  _inherits(MSStreamBackend, _Backend);

  function MSStreamBackend(options) {
    _classCallCheck(this, MSStreamBackend);

    var _this = _possibleConstructorReturn(this, (MSStreamBackend.__proto__ || Object.getPrototypeOf(MSStreamBackend)).call(this, options));

    _this.stream = null;
    _this.streamReader = null;
    return _this;
  }

  _createClass(MSStreamBackend, [{
    key: 'initXHR',
    value: function initXHR() {
      _get(MSStreamBackend.prototype.__proto__ || Object.getPrototypeOf(MSStreamBackend.prototype), 'initXHR', this).call(this);
      this.xhr.responseType = type;
    }
  }, {
    key: 'onXHRStart',
    value: function onXHRStart() {
      var _this2 = this;

      var checkProgress = function checkProgress() {
        if (_this2.xhr.readyState === 3) {
          // We don't get the stream until readyState 3, and it's gone after load.
          _this2.stream = _this2.xhr.response;
          _this2.xhr.removeEventListener('readystatechange', checkProgress);
          _this2.emit('open');
        }
      };
      this.xhr.addEventListener('readystatechange', checkProgress);
    }
  }, {
    key: 'waitForStream',
    value: function waitForStream() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_this3.stream) {
          resolve(_this3.stream);
        } else {
          (function () {
            var oncomplete = null;
            _this3._onAbort = function (err) {
              oncomplete();
              reject(err);
            };
            var checkStart = function checkStart() {
              resolve(_this3.stream);
            };
            oncomplete = function oncomplete() {
              _this3.off('open', checkStart);
              _this3._onAbort = null;
            };
            _this3.on('open', checkStart);
          })();
        }
      });
    }

    /**
     * Trigger further download of bytes
     * @returns {Promise}
     */

  }, {
    key: 'bufferToOffset',
    value: function bufferToOffset(end) {
      var _this4 = this;

      return this.waitForStream().then(function (stream) {
        return new Promise(function (resolve, reject) {
          if (_this4.streamReader) {
            throw new Error('cannot trigger read when reading');
          }
          if (_this4.offset >= end || _this4.eof) {
            resolve();
          } else {
            var nbytes = end - _this4.offset;
            _this4.streamReader = new MSStreamReader();
            _this4.streamReader.onload = function (event) {
              _this4.streamReader = null;
              var buffer = event.target.result;
              if (buffer.byteLength > 0) {
                _this4.bytesRead += buffer.byteLength;
                _this4.emit('buffer', buffer);
              } else {
                // Zero length means end of stream.
                _this4.eof = true;
                _this4.emit('done');
              }
              resolve();
            };
            _this4.streamReader.onerror = function () {
              _this4.streamReader = null;
              _this4.stream = null;
              _this4.emit('error');
              reject(new Error('mystery error streaming'));
            };
            _this4._onAbort = function (err) {
              _this4.streamReader.abort();
              _this4.streamReader = null;
              _this4.stream = null;
              _this4.emit('error');
              reject(err);
            };
            _this4.streamReader.readAsArrayBuffer(stream, nbytes);
          }
        });
      });
    }
  }, {
    key: 'abort',
    value: function abort() {
      if (this.streamReader) {
        this.streamReader.abort();
        this.streamReader = null;
      }
      if (this.stream) {
        this.stream.msClose();
        this.stream = null;
      }
      _get(MSStreamBackend.prototype.__proto__ || Object.getPrototypeOf(MSStreamBackend.prototype), 'abort', this).call(this);
    }
  }]);

  return MSStreamBackend;
}(Backend);

MSStreamBackend.supported = function () {
  try {
    var xhr = new XMLHttpRequest();
    // IE demands that open() be called before we can set xhr.responseType
    xhr.open("GET", "/robots.txt");
    xhr.responseType = type;
    return xhr.responseType === type;
  } catch (e) {
    return false;
  }
};

module.exports = MSStreamBackend;
