"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DownloadBackend = require('./download-backend.js');

var BinaryStringBackend = function (_DownloadBackend) {
  _inherits(BinaryStringBackend, _DownloadBackend);

  function BinaryStringBackend() {
    _classCallCheck(this, BinaryStringBackend);

    return _possibleConstructorReturn(this, (BinaryStringBackend.__proto__ || Object.getPrototypeOf(BinaryStringBackend)).apply(this, arguments));
  }

  _createClass(BinaryStringBackend, [{
    key: "initXHR",
    value: function initXHR() {
      _get(BinaryStringBackend.prototype.__proto__ || Object.getPrototypeOf(BinaryStringBackend.prototype), "initXHR", this).call(this);
      this.xhr.responseType = "text";
      this.xhr.overrideMimeType('text/plain; charset=x-user-defined');
    }
  }, {
    key: "onXHRProgress",
    value: function onXHRProgress() {
      var slice = this.xhr.responseText.slice(this.bytesRead);
      if (slice.length > 0) {
        this.bytesRead += slice.length;
        this.emit('buffer', slice);
      }
    }
  }, {
    key: "onXHRLoad",
    value: function onXHRLoad() {
      // We may or may not get that final event
      this.onXHRProgress();
      _get(BinaryStringBackend.prototype.__proto__ || Object.getPrototypeOf(BinaryStringBackend.prototype), "onXHRLoad", this).call(this);
    }
  }]);

  return BinaryStringBackend;
}(DownloadBackend);

BinaryStringBackend.supported = function () {
  try {
    var xhr = new XMLHttpRequest();
    return !!xhr.overrideMimeType;
  } catch (e) {
    return false;
  }
};

module.exports = BinaryStringBackend;
